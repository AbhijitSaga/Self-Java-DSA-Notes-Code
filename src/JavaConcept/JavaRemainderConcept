Question: 1.What are the different ways to create objects in Java?
Ans:-  GFG-> Class
     1. Using new keyword:-
        GFG obj = new GFG();

     3. Using clone() method:-
        GFG obj1 = new GFG();
        GFG obj2 = (GFG)obj1.clone();

     4. Using deserialization:-
             GFG d = new GFG("GeeksForGeeks");
             FileOutputStream f  = new FileOutputStream("file.txt");
             ObjectOutputStream oos  = new ObjectOutputStream(f);
             //Object of DeserializationExample class is serialized using writeObject() method and written to file.txt file.
             oos.writeObject(d);
             oos.close();
             // Freeing up memory resources
             f.close();

     2. Using new instance:-
        Class cls = Class.forName("GFG");
        GFG obj = (GFG)cls.newInstance();

     5. Using the newInstance() method of the Constructor class:-
        Constructor<GFG> constructor = GFG.class.getDeclaredConstructor();
        GFG obj = constructor.newInstance();

Question: 2. Abstract classes in Java can have constructors, but you cannot create an instance of an abstract class directly. ?
Answer-> A constructor in Java doesn't actually "build" the object, it is used to initialize fields.

         Imagine that your abstract class has fields x and y, and that you always want them to be initialized in a certain way,
         no matter what actual concrete subclass is eventually created. So you create a constructor and initialize these fields.

         Now, if you have two different subclasses of your abstract class, when you instantiate them their constructors will be called,
         and then the parent constructor will be called and the fields will be initialized.

         If you don't do anything, the default constructor of the parent will be called. However,
         you can use the super keyword to invoke specific constructor on the parent class.