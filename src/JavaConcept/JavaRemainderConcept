Question: 1.What are the different ways to create objects in Java?
Ans:-  GFG-> Class
     1. Using new keyword:-
        GFG obj = new GFG();

     3. Using clone() method:-
        GFG obj1 = new GFG();
        GFG obj2 = (GFG)obj1.clone();

     4. Using deserialization:-
             GFG d = new GFG("GeeksForGeeks");
             FileOutputStream f  = new FileOutputStream("file.txt");
             ObjectOutputStream oos  = new ObjectOutputStream(f);
             //Object of DeserializationExample class is serialized using writeObject() method and written to file.txt file.
             oos.writeObject(d);
             oos.close();
             // Freeing up memory resources
             f.close();

     2. Using new instance:-
        Class cls = Class.forName("GFG");
        GFG obj = (GFG)cls.newInstance();

     5. Using the newInstance() method of the Constructor class:-
        Constructor<GFG> constructor = GFG.class.getDeclaredConstructor();
        GFG obj = constructor.newInstance();

Question: 2. Abstract classes in Java can have constructors, but you cannot create an instance of an abstract class directly. ?
Answer-> A constructor in Java doesn't actually "build" the object, it is used to initialize fields.

         Imagine that your abstract class has fields x and y, and that you always want them to be initialized in a certain way,
         no matter what actual concrete subclass is eventually created. So you create a constructor and initialize these fields.

         Now, if you have two different subclasses of your abstract class, when you instantiate them their constructors will be called,
         and then the parent constructor will be called and the fields will be initialized.

         If you don't do anything, the default constructor of the parent will be called. However,
         you can use the super keyword to invoke specific constructor on the parent class.

Question 3. this , super, static  keyword
           this:
  Answer   ->"this" keyword in Java is used to reference the current object. When used with parentheses,
              such as "this()," it is typically the first line in a constructor
           -> allowing you to initialize instance variables "this.a"  and invoke methods "this.method()"of the current object.
            super:
           ->"super" keyword in Java is used to reference the parent object. When used with parentheses,
              such as "super()," it is typically the first line in a constructor
           -> allowing you to initialize instance variables "super.a"  and invoke methods "super.method()"of the super class object.
           -> static variable, method, block independent to object they mainly used to memory managemt in side static method
           only static type variable initialize , call only static type method and calling chain static
           variable -> static block->static method and static method , variable directly call by class name.


 Question 4. final
Ans-> final variable cannot be changed once initialized ,
      You must initialize a final variable once and only once. There are three ways to do that for an instance variable:

     1. in the constructor
     2. in an instance initialization block.
     3. when you declare it
    -> final class can not extends(Inherited) and Final classes can be used to achieve immutability, security,
    performance gains, and design clarity in Java.
    -> final method can not override.
    ->final keyword can also be used with variables and methods to restrict their modification.

Question 5. finally, finalize keyword
       finally-> it always execute even exception occur or not occur after try/catch block , mainly used clean of code ( colse the connectin),
               There is only one situation where finally block wonâ€™t be executed when we are using System.exit(0) method.
                When we are using System.exit(0) then JVM itself shutdown
      finalize->It's a protected method inherited from the Object class.
                It's invoked by the garbage collector before an object is garbage collected.
                It offers a chance to perform cleanup tasks or release resources before the object's memory is reclaimed.


 Question 6. private , protected
 Answer->only outer class can not make private and protected but we can make default , public
    private-> access all class's member inside the class
    protected-> access all class's member inside the package and outside the package only  in inheritance case
    public-> any where access
    default-> access only inside the package


Question 7. Can we modify the throws clause of the superclass method while overriding it in the subclass?
->If SuperClass does not declare an exception, then the SubClass can only declare unchecked exceptions, but not the checked exceptions.
->If SuperClass declares an exception, then the SubClass can only declare the same or child exceptions of the exception declared by the
 SuperClass and any new Runtime Exceptions, just not any new checked exceptions at the same level or higher.
->If SuperClass declares an exception, then the SubClass can declare without exception.

Question 8. Functional Interfaces
An interface that contains only one abstract method is known as a functional interface,
but there is no restriction, you can have n number of default and static methods inside a functional interface.





